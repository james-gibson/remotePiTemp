//
// Get information from connected devices.
//
// @chamerling
//

var utils = require('./utils');
var fs = require('fs'),
    path = require('path');;
var W1_FILE = 'w1_bus_master1/w1_master_slaves';
var BASE_DIR = detectEnvironment(W1_FILE);


function detectEnvironment(W1_FILE){
  try {
    fs.lstatSync('/sys/bus/w1/devices/' + W1_FILE);

    fs.lstatSync('../testData/' + W1_FILE);
  }
  catch (e) {
    console.log('Unable to find w1_slaves, falling back to fake data');

    var dirString = path.join(path.dirname(fs.realpathSync(__filename)), '../testData/');

    console.log('Searching for fake data in: ', dirString);
    return dirString;
  }
  return '/sys/bus/w1/devices/';
}


//
// Get all connected sensor IDs as array
// @param callback(err, array)
//
var sensors = function(callback) {
  callback = utils.safe(callback);

  fs.readFile(BASE_DIR + W1_FILE, 'utf8', function (err, data) {
    if (err) {
      return callback(err);
    }
    
    var parts = data.split("\n");
    parts.pop();
    return callback(null, parts);
  });
}
exports.sensors = sensors;

//
// Get the temperature of a given sensor
// @param sensor : The sensor ID
// @param callback : callback (err, value)
//
var temperature = function(sensor, callback) {
  callback = utils.safe(callback);

  fs.readFile(BASE_DIR + sensor + '/w1_slave', 'utf8', function (err, data) {
    if (err) {
      return callback(err);
    }
    
    var arr = data.split(' ');
    var t = data.split('t=');
    if(t.length)
    {
      var tempC = Math.round(t[1]/100)/10;
      var tempF = 32 + tempC * 1.8000;
      return callback(null, {'id':sensor,'C':tempC, 'F':tempF});
    }
    if (arr[1].charAt(0) === 'f') {
      var x = parseInt("0xffff" + arr[1].toString() + arr[0].toString(), 16);
      var output = -((~x + 1) * 0.0625);
      return callback(null, output);
      
      } else if (arr[1].charAt(0) === '0') {
        var output = parseInt("0x0000" + arr[1].toString() + arr[0].toString(), 16) * 0.0625;
       	return callback(null, output);
      } else {
        return callback(new Error('Can not read temperature for sensor ' + sensor));
      }
  });
};
exports.temperature = temperature;
